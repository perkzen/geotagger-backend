name: Build and deploy to ECS

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for arm64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: runner.os == 'Linux'

      - name: Set up Docker for arm64
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

          #      - name: Build, Tag, and Push Docker Image to Amazon ECR
          #        env:
          #          IMAGE_TAG: ${{ inputs.tag }}
          #        run: |
          #          IMAGE_TAG=${IMAGE_TAG:-latest}
          #
          #          ECR_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REGISTRY }}:$IMAGE_TAG"
          #
          #          docker buildx create --use
          #          docker buildx inspect --bootstrap
        #
        #          docker buildx build --platform linux/arm64 -t $ECR_URI --push .

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest
          platforms: linux/arm64


      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
          --query taskDefinition \
          --region ${{ vars.AWS_REGION }} > ../../task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.ECR_REGISTRY  }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REGISTRY }}:${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true


